apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: factory-simple-backstage-template
  title: Factory Simple Backstage Template
  description: Create a service from a template
  tags:
    - factory
    - go
spec:
  owner: KL-Engineering
  type: service
  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    # manifests
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./manifests
        targetPath: ./manifests
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}

    - id: publish
      name: Publish local content
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}
        sourcePath: ./manifests

    # terraform-env
    - id: terraform-env-template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./terraform-env
        targetPath: ./terraform-env
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}-tf-env
          owner: ${{ parameters.owner }}

    - id: publish-terraform-env
      name: Publish local content
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}-tf-env
        sourcePath: ./terraform-env
    
    # terraform-meta
    - id: terraform-meta-template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./terraform-meta
        targetPath: ./terraform-meta
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}-tf-meta
          owner: ${{ parameters.owner }}

    - id: publish-terraform-meta
      name: Publish local content
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}-tf-meta
        sourcePath: ./terraform-meta

    # terraform-svc
    - id: terraform-svc-template
      name: Fetch second Skeleton + Template
      action: fetch:template
      input:
        url: ./terraform-svc
        targetPath: ./terraform-svc
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: ${{parameters.repoUrl}}-tf-svc
          owner: ${{ parameters.owner }}

    - id: publish-second
      name: Publish second repository
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{parameters.repoUrl}}-tf-svc
        repoVisibility: "internal"
        force: true
        sourcePath: ./terraform-svc

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml" 
    # - id: register-first
    #   name: Register the first generated repo
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps.publish-first.output.repoContentsUrl }}
    #     catalogInfoPath: "/catalog-info.yaml"
  output:
    links:
      - title: First Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
